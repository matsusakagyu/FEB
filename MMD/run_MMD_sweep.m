function run_MMD_sweep(rhoL_vec, rhoT_vec, opts)
% Sweep wheelbase (L) and track (t) ratios and call main_MMD each case.

% ---- defaults ----
if nargin < 1, rhoL_vec = 1.0; end
if nargin < 2, rhoT_vec = 1.0; end
if nargin < 3, opts = struct; end
opts = setdef(opts,'mode','independent');   % or 'hold_t_over_L'
opts = setdef(opts,'pause_s',0.2);
opts = setdef(opts,'linkfigs',false);
opts = setdef(opts,'tagPrefix','MMD');

% ensure row vectors
rhoL_vec = rhoL_vec(:)'; rhoT_vec = rhoT_vec(:)';

% ---- locate & backup vehicle_params.m ----
thisDir = fileparts(mfilename('fullpath'));
vpFile  = fullfile(thisDir,'vehicle_params.m');
backup  = fullfile(thisDir,'vehicle_params__backup_autosweep__.m');
assert(exist(vpFile,'file')==2,'vehicle_params.m not found in %s',thisDir);

% baseline params
p0 = vehicle_params();

% resolve geometry field names safely
[tfName, tF0] = first_field(p0, {'tf','tfw'});
[trName, tR0] = first_field(p0, {'tr','trw'});
assert(~isempty(tfName) && ~isempty(trName), ...
    'vehicle_params() must define front/rear track as (tf,tr) or (tfw,trw).');

% baseline wheelbase & CG split
lf0 = mustfield(p0,'lf');  lr0 = mustfield(p0,'lr');
L0  = lf0 + lr0;
aFrac = lf0 / L0;

% backup original file once
if ~exist(backup,'file'), copyfile(vpFile,backup); end
cleanup = onCleanup(@() restore_original(vpFile,backup));

% ---- build sweep grid ----
if strcmpi(opts.mode,'hold_t_over_L')
    grid = [rhoL_vec; nan(1,numel(rhoL_vec))];  % t/L held const → rhoT=rhoL later
    tie_t_to_L = true;
else
    [RhoL,RhoT] = meshgrid(rhoL_vec, rhoT_vec);
    grid = [RhoL(:)'; RhoT(:)'];
    tie_t_to_L = false;
end

% ---- run cases ----
figs = gobjects(0);
for k = 1:size(grid,2)
    rhoL = grid(1,k);

    if tie_t_to_L
        rhoT = rhoL;   % keep t/L constant
    else
        rhoT = grid(2,k);
    end
    if isnan(rhoT), rhoT = 1.0; end

    % scaled geometry (keep a/L constant)
    L   = L0 * rhoL;
    lf  = aFrac * L;
    lr  = L - lf;
    tf  = tF0 * rhoT;
    tr  = tR0 * rhoT;

    % write shim vehicle_params.m with overridden geometry
    code = make_vehicle_params_shim(p0, lf, lr, tf, tr, tfName, trName);
    fid = fopen(vpFile,'w'); assert(fid>0,'Cannot open vehicle_params.m for writing');
    fwrite(fid, code); fclose(fid);

    % run MMD
    close(findobj('Type','figure','-regexp','Name','^Moment Method Diagram')); %#ok<FNDSB>
    main_MMD;

    % tag figure
    fig = gcf; figs(end+1) = fig; %#ok<AGROW>
    fig.Name = sprintf('%s | L/L0=%.2f, t/t0=%.2f', opts.tagPrefix, rhoL, rhoT);
    ax = gca; ax.Title.String = sprintf('%s — L/L_0=%.2f, t/t_0=%.2f', ax.Title.String, rhoL, rhoT);

    pause(opts.pause_s);
end

if opts.linkfigs && numel(figs)>1
    axs = arrayfun(@(f) get(f,'CurrentAxes'), figs);
    linkaxes([axs{:}],'xy');
end
end

% -------- helpers --------
function [name, val] = first_field(S, candidates)
name = ''; val = [];
for i=1:numel(candidates)
    if isfield(S, candidates{i})
        name = candidates{i};
        val  = S.(name);
        return
    end
end
end

function v = mustfield(S, name)
assert(isfield(S,name), 'vehicle_params() missing field: %s', name);
v = S.(name);
end

function restore_original(vpFile, backup)
if exist(backup,'file')==2
    try, copyfile(backup,vpFile,'f'); delete(backup); catch, end
end
end

function code = make_vehicle_params_shim(p0, lf, lr, tf, tr, tfName, trName)
S = jsonencode(p0);
code = sprintf([ ...
'function p = vehicle_params()\n' ...
'%% AUTO-GENERATED by run_MMD_sweep — DO NOT EDIT\n' ...
'p = jsondecode(''%s'');\n' ...
'p.lf = %.15g; p.lr = %.15g;\n' ...
'p.%s = %.15g; p.%s = %.15g;\n' ...
'if isfield(p,''L''), p.L = p.lf + p.lr; end\n' ...
'if isfield(p,''g'')\n' ...
'  if isfield(p,''Wf''), p.Wf = (p.lr/(p.lf+p.lr))*p.m*p.g; end\n' ...
'  if isfield(p,''Wr''), p.Wr = (p.lf/(p.lf+p.lr))*p.m*p.g; end\n' ...
'end\n' ...
'end\n'], S, lf, lr, tfName, tf, trName, tr);
end

function s = setdef(s,k,v)
if ~isfield(s,k) || isempty(s.(k)), s.(k) = v; end
end
